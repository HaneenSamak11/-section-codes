class FirstClass: # Define a class object
     def setdata(self, value): # Define class methods
         self.data = value # self is the instance
     def display(self):
         print(self.data) 
         
         
         
x = FirstClass() # Make two instances
y = FirstClass() # Each is a new namespace


print(x)
print(y)
print(isinstance(x, FirstClass))

print("##########################")

x.setdata("Ahmed") # Runs: FirstClass.setdata(y, Ahmed)
y.setdata(3.14159) # Runs: FirstClass.setdata(y, 3.14159)
x.display()
y.display()

print("##########################")

x.data = "New value" # Can get/set attributes
x.display()

print("##########################")

x.anothername = "spam" # Can set new attributes here too!
print(x.anothername)

class Customer:
#     def __init__(self, name, balance):  
#         self.name = name
#         self.balance = balance
#         print("The	init	method was called")

# cust = Customer("Lara de Silva" , 100) # <-- don't specify balance explicitly  print(cust.name)
# print(cust.name) # <-- attribute is created anyway
# print(cust.balance) # <-- attribute is created anyway


###Constructors with default values

# class Customer:
#     def	__init__(self, name, balance=0):  
#         self.name = name
#         self.balance = balance
#         print("The	init	method was called")
        

# cust = Customer("Lara de Silva") # <-- don't specify balance explicitly  print(cust.name)
# print(cust.balance) # <-- attribute is created anyway


###Class other special functions

# class Customer:
#     def	__init__(self, name, balance=0):  
#         self.name = name
#         self.balance = balance
#         print("The	init	method was called")
        
#     def __str__(self):
#         return 'Customer : ' +str(self.name)+ ' , balance: ' + str(self.balance) 
    
#     def __add__(self, other): # On "self + other"
#         return Customer("Test_Customer",self.balance + other)

# cust = Customer("Lara de Silva") # <-- don't specify balance explicitly  print(cust.name)
# # print(cust.balance) # <-- attribute is created anyway
# # print(cust)

# c2 = cust + 230
# print(c2.balance)



###Constructors Vs. Destructors

class Employee:

	# Initializing
	def __init__(self):
		print('Employee created.')

	# Deleting (Calling destructor)
	def __del__(self):
		print('Destructor called, Employee deleted.')

obj = Employee()
del obj

# class Person(object):

# 	# Constructor
# 	def __init__(self, name):
# 		self.name = name

# 	# To get name
# 	def getName(self):
# 		return self.name

# 	# To check if this person is an employee
# 	def isEmployee(self):
# 		return False


# # Inherited or Subclass (Note Person in bracket)
# class Employee(Person):

# 	# Here we return true
# 	def isEmployee(self):
# 		return True


# # Driver code
# person = Person("Ahmed") # An Object of Person
# print(person.getName(), person.isEmployee())

# emp = Employee("Ali") # An Object of Employee
# print(emp.getName(), emp.isEmployee())



print("############################################################")


# Python code to demonstrate how parent constructors
# are called.

## parent class
# class Person(object):

# 	# __init__ is known as the constructor
# 	def __init__(self, name, idnumber):
# 		self.name = name
# 		self.idnumber = idnumber

# 	def display(self):
# 		print(self.name)
# 		print(self.idnumber)

# # child class
# class Employee(Person):
# 	def __init__(self, name, idnumber, salary, post):
# 		self.salary = salary
# 		self.post = post

# 		# invoking the __init__ of the parent class
# 		Person.__init__(self, name, idnumber)

# # creation of an object variable or an instance
# a = Employee('Rahul', 886012, 200000, "Intern")

# # calling a function of the class Person using its instance
# a.display()


print("########################################################")

# Python code to demonstrate how to use super()

# parent class
class Person():
    def __init__(self, name, age):
    	self.name = name
    	self.age = age
    
    def display(self):
    	print(self.name, self.age)

# child class
class Student(Person):
    def __init__(self, name, age):
    	self.sName = name
    	self.sAge = age
    	# inheriting the properties of parent class
    	super().__init__("Osama", age)
    
    def displayInfo(self):
    	print(self.sName, self.sAge)

obj = Student("Khalid", 23)
obj.display()
obj.displayInfo()

